}
g <- function(x) {
x*y
}
f(3)
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x >5) {
x <-0
}
f <- function(x) {
g <- function(y) {
y + x
}
z <- 4
x + g(x)
}
z <-10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
one <- read.csv("001.csv")
getwd()
setwd(dir)
pollutantmean <- function(x, y, id = 1:332) {
files_list <- list.files(x, full.names=TRUE)
dat <- data.frame()
for (i in 1:332) {
dat <- rbind(dat, read.csv(flies_list[i]))
}
dat_subset <- dat[which(dat[, "ID"] == id),]
y <- "sulfate" : "nitrate"
mean(dat_subset[ , y])
}
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean <- function(x, y, id = 1:332) {
files_list <- list.files(x, full.names=TRUE)
dat <- data.frame()
for (i in 1:332) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "ID"] == id),]
y <- "sulfate" : "nitrate"
mean(dat_subset[ , y])
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(x, y, id = 1:332) {
files_list <- list.files(x, full.names=TRUE)
dat <- data.frame()
for (i in 1:332) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "ID"] == id),]
y <- "sulfate" : "nitrate"
mean(dat_subset[ , y], na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", 70:72)
library(datasets)
data(iris)
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[,1:4],2,mean)
rowMeans(iris[,1:4])
apply(iris,2,mean)
str(iris)
apply(iris[,1:4], 2,mean)
library(datasets)
data(mtcars)
str(mtcars)
tapply(mtcars$mpg, mtgcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2,mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
str(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls()
q()
ls()
q()
library(swirl)
ls()
rm(list=ls())
swirl()
num_vect <- c(0.5, 55, -10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Irene")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
q()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
x<- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data<- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
q()
ls()
rm(list=ls())
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<- c(foo = 11, bar = 2, norf = N
A)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
q()
ls()
rm(list=ls())
library(swirl)
swirl()
my_vector<- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
q()
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
q()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x) {x+1}, 6)
evaluate(function(x) {x<-c[1]}, c(8,4,0)
)
evaluate(function(x) {x<-c(x,...}, c(8,4,0))
evaluate(function(x) {x<-c(x,...)}, c(8,4,0))
evaluate(function(x) {x<-c(x)}, c(8,4,0))
evaluate(function(x) {x<-c(x,)}, c(8,4,0))
evaluate(function(x) {x<-c(x,y,z)}, c(8,4,0))
evaluate(function(x) {x=8}, c(8,4,0))
evaluate(function(x) {x <- which(dat,1)}, c(8,4,0))
evaluate(function(x) {x <- which(c,1)}, c(8,4,0))
?which
info()
main()
evaluate(function(x) {x <- head(c)}, c(8,4,0))
evaluate(function(x) {x[[1]]}, c(8,4,0))
evaluate(function(x) {x[[3]]}, c(8,4,0))
evaluate(function(x) {length(x,3)}, c(8,4,0))
evaluate(function(x) {length(x)}, c(8,4,0))
evaluate(function(x) {x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("I", "need", "help")
telegram("That", "is", "fantastic")
submit()
mad_libs(place="Barnaul",adjective="worried",noun="security cams")
submit()
submit()
submit()
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
q()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
2
1
vect["bar"]
vect[c("foo", "bar")]
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_map
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, glags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
q()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
q()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorn(10, 100, 25)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
set.seed(1)
rpois(5,2)
?pois
?rpois
?ppois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2*x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summary(Rprof)
library(datasets)
Rprof()
summaryRprof(lm)
summaryRprof()
set.seed(1)
rpois(5,2)
q()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.Date()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
?lubridate
??lubridate
install.packages("lubridate")
library(lubridate)
str(lubridate)
q()
ls()
rm(list-ls())
rm(list=ls())
ls()
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, par(col=2))
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
play()
str(mtcars)
head(mtcars)
summary(mtcars)
dim9mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
?stop
q()
ls()
rm(list=ls())
?as.integer
?return
?as.data.frame
q()
.libPath()
.libPaths()
install.packages("Hmisc")
lib()
q()
setwd("C:/Users/Irene/Downloads/5ReproducibleResearch/RepData_PeerAssessment1")
Sys.setlocale("LC_TIME", "English")
library(knitr)
setwd("C:/Users/Irene/Downloads/5ReproducibleResearch/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
